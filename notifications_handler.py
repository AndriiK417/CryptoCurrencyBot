import telebot
import requests
from apscheduler.schedulers.background import BackgroundScheduler

API_TOKEN = '6388083417:AAFnoBZpLQkrrF95Bj9uq0nYma5EUt9qs1k'
bot = telebot.TeleBot(API_TOKEN)

# Scheduler
scheduler = BackgroundScheduler()
scheduler.start()

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å:
# chat_id ‚Üí —Å–ø–∏—Å–æ–∫ job_id
user_jobs = {}

# –ë–∞–∑–æ–≤–∏–π URL –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω
PRICE_API_URL = 'https://api.coinlore.net/api/tickers/'

def fetch_price(symbol: str) -> float | None:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É symbol –∞–±–æ None, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."""
    resp = requests.get(PRICE_API_URL, params={'start': 0, 'limit': 100})
    data = resp.json().get('data', [])
    for c in data:
        if c['symbol'].upper() == symbol.upper():
            return float(c['price_usd'])
    return None

def set_alert(message):
    """
    –û—á—ñ–∫—É—î –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:
    /alert BTC above 70000 hourly
    /alert ETH below 1500 daily
    """
    parts = message.text.split()
    if len(parts) != 5 or parts[0] != '/alert':
        bot.send_message(
            message.chat.id,
            "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n"
            "/alert <SYMBOL> <above|below> <threshold> <hourly|daily>\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /alert BTC above 70000 hourly"
        )
        return

    _, symbol, direction, threshold_str, interval = parts
    try:
        threshold = float(threshold_str)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ—Ä—ñ–≥ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
        return

    if direction not in ('above', 'below'):
        bot.send_message(message.chat.id, "–í–∫–∞–∂—ñ—Ç—å direction: above –∞–±–æ below.")
        return
    if interval not in ('hourly', 'daily'):
        bot.send_message(message.chat.id, "–Ü–Ω—Ç–µ—Ä–≤–∞–ª: hourly –∞–±–æ daily.")
        return

    # –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä job'–∏
    job_id = f"alert_{message.chat.id}_{symbol}_{direction}_{threshold}_{interval}"

    # –Ø–∫—â–æ –≤–∂–µ —ñ—Å–Ω—É—î ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É
    try:
        scheduler.remove_job(job_id)
    except Exception:
        pass

    def job_func():
        price = fetch_price(symbol)
        if price is None:
            bot.send_message(message.chat.id, f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –º–æ–Ω–µ—Ç—É {symbol}.")
            return

        if (direction == 'above' and price > threshold) or \
           (direction == 'below' and price < threshold):
            bot.send_message(
                message.chat.id,
                f"üîî {symbol} –∑–∞—Ä–∞–∑ {price}$, —â–æ "
                f"{'–≤–∏—â–µ' if direction=='above' else '–Ω–∏–∂—á–µ'} –∑–∞ {threshold}$"
            )
            # —è–∫—â–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ ‚Äî —Ä–∞—Å–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫
            # scheduler.remove_job(job_id)

    # –î–æ–¥–∞—î–º–æ job
    if interval == 'hourly':
        scheduler.add_job(job_func, 'interval', hours=1, id=job_id)
    else:  # daily
        scheduler.add_job(job_func, 'interval', days=1, id=job_id)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ
    user_jobs.setdefault(message.chat.id, []).append(job_id)

    bot.send_message(
        message.chat.id,
        f"‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:\n"
        f"{symbol} {direction} {threshold}$ –∫–æ–∂–Ω—ñ {interval}."
    )

def list_alerts(message):
    """–í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –¥—Ä—É–∂–Ω—ñ–º —Ç–µ–∫—Å—Ç–æ–º."""
    jobs = user_jobs.get(message.chat.id, [])
    if not jobs:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å.")
        return
    lines = []
    for job_id in jobs:
        parts = job_id.split('_', 5)
        if len(parts) == 6:
            _, _, symbol, direction, threshold, _ = parts
            lines.append(f"- {symbol} {direction} {threshold}$")
        else:
            lines.append(f"- {job_id}")
    text = "–í–∞—à—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:\n" + "\n".join(lines)
    bot.send_message(message.chat.id, text)

def remove_alert(message):
    """
    –û—á—ñ–∫—É—î –∫–æ–º–∞–Ω–¥—É:
    /remove_alert <job_id>
    """
    parts = message.text.split(maxsplit=1)
    if len(parts) != 2:
        bot.send_message(message.chat.id, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /remove_alert <job_id>")
        return
    job_id = parts[1].strip()
    try:
        scheduler.remove_job(job_id)
        user_jobs[message.chat.id].remove(job_id)
        bot.send_message(message.chat.id, f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è {job_id} –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except Exception:
        bot.send_message(message.chat.id, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ {job_id}.")

def schedule_alert(chat_id, symbol, direction, threshold, interval):
    """
    –°—Ç–≤–æ—Ä—é—î job —ñ –ø–æ–≤–µ—Ä—Ç–∞—î job_id.
    """
    job_id = f"alert_{chat_id}_{symbol}_{direction}_{threshold}_{interval}"
    # –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π, —è–∫—â–æ —î
    try: scheduler.remove_job(job_id)
    except: pass

    def job_func():
        price = fetch_price(symbol)
        if price is None: 
            bot.send_message(chat_id, f"Coin {symbol} not found.")
            return
        cond = (direction=='above' and price>threshold) or \
               (direction=='below' and price< threshold)
        if cond:
            bot.send_message(chat_id,
                f"üîî {symbol} is now {price}$, "
                f"{'above' if direction=='above' else 'below'} {threshold}$"
            )
    # —Ä–æ–∑–∫–ª–∞–¥
    if interval == 'minutely':
        scheduler.add_job(job_func, 'interval', minutes=1, id=job_id)
    elif interval == 'hourly':
        scheduler.add_job(job_func, 'interval', hours=1, id=job_id)
    else:  # daily
        scheduler.add_job(job_func, 'interval', days=1, id=job_id)

    user_jobs.setdefault(chat_id, []).append(job_id)
    return job_id

def cancel_alert(chat_id: int, job_id: str):
    """
    –í–∏–¥–∞–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–∞ job_id —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –¥—Ä—É–∂–Ω—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
    """
    try:
        scheduler.remove_job(job_id)
        user_jobs.get(chat_id, []).remove(job_id)
        parts = job_id.split('_', 5)
        if len(parts) == 6:
            _, _, symbol, direction, threshold, _ = parts
            bot.send_message(
                chat_id,
                f"üóëÔ∏è Alert removed: {symbol} {direction} {threshold}$"
            )
        else:
            bot.send_message(chat_id, f"üóëÔ∏è Alert {job_id} removed.")
    except Exception:
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.")

