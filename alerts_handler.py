from telebot import types
import notifications_handler
from notifications_handler import bot, user_jobs
from markups.alerts_markup import (
    alert_menu_markup,
    alert_coins_markup,
    alert_direction_markup,
    alert_threshold_markup,
    alert_interval_markup,
    get_remove_alerts_markup
)

# –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: chat_id ‚Üí { step, coin, direction, threshold, interval, message_id }
user_state = {}


def show_alert_menu(message):
    """
    –ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é Alerts: Add / List / Remove
    """
    sent = bot.send_message(
        message.chat.id,
        "üîî Alerts menu:",
        reply_markup=alert_menu_markup
    )
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ message_id, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏
    user_state[message.chat.id] = {'message_id': sent.message_id}


def start_add_alert(call):
    """–ö—Ä–æ–∫ 1: –≤–∏–±—ñ—Ä –º–æ–Ω–µ—Ç–∏ ‚Äî —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    chat = call.message.chat.id
    msg_id = call.message.message_id
    user_state[chat].update({'step': 'coin', 'message_id': msg_id})
    bot.edit_message_text(
        "1Ô∏è‚É£ Choose coin for alert:",
        chat_id=chat,
        message_id=msg_id,
        reply_markup=alert_coins_markup
    )


def choose_coin(call):
    """–ö—Ä–æ–∫ 2: –≤–∏–±—ñ—Ä –Ω–∞–ø—Ä—è–º–∫—É"""
    chat = call.message.chat.id
    msg_id = call.message.message_id
    sym = call.data.split('_', 2)[2]
    state = user_state.get(chat, {})
    state.update({'coin': sym, 'step': 'direction', 'message_id': msg_id})
    bot.edit_message_text(
        f"2Ô∏è‚É£ {sym}: Above or Below?",
        chat_id=chat,
        message_id=msg_id,
        reply_markup=alert_direction_markup
    )


def choose_direction(call):
    """–ö—Ä–æ–∫ 3: –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Ä–æ–≥—É"""
    chat = call.message.chat.id
    msg_id = call.message.message_id
    direction = call.data.split('_')[2]
    state = user_state.get(chat, {})
    state.update({'direction': direction, 'step': 'threshold', 'message_id': msg_id})
    bot.edit_message_text(
        "3Ô∏è‚É£ Enter threshold price in USD (e.g. 70000):",
        chat_id=chat,
        message_id=msg_id,
        reply_markup=alert_threshold_markup
    )


def receive_threshold(message):
    """–ö—Ä–æ–∫ 4: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ä–æ–≥—É —Ç–∞ –≤–∏–±—ñ—Ä —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É"""
    chat = message.chat.id
    state = user_state.get(chat)
    if not state or state.get('step') != 'threshold':
        return False
    try:
        th = float(message.text)
    except ValueError:
        bot.send_message(chat, "‚ùó Please enter a valid number.")
        return True
    # –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–æ—Ä–æ–≥–æ–º
    bot.delete_message(chat_id=chat, message_id=message.message_id)
    state.update({'threshold': th, 'step': 'interval'})
    msg_id = state.get('message_id')
    bot.edit_message_text(
        "4Ô∏è‚É£ Choose check interval:",
        chat_id=chat,
        message_id=msg_id,
        reply_markup=alert_interval_markup
    )
    return True


def choose_interval(call):
    """–ö—Ä–æ–∫ 5: —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è alert —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"""
    chat = call.message.chat.id
    msg_id = call.message.message_id
    state = user_state.get(chat, {})
    interval = call.data.split('_', 2)[2]
    state['interval'] = interval

    notifications_handler.schedule_alert(
        chat_id=chat,
        symbol=state['coin'],
        direction=state['direction'],
        threshold=state['threshold'],
        interval=state['interval']
    )
    bot.edit_message_text(
        "‚úÖ Alert set:\n"
        f"{state['coin']} {state['direction']} {state['threshold']}$\n"
        f"every {state['interval']}",
        chat_id=chat,
        message_id=msg_id,
        reply_markup=None
    )
    user_state.pop(chat, None)


def list_alerts(call):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É alert-—ñ–≤ —É —Ç–æ–º—É –∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ"""
    chat = call.message.chat.id
    msg_id = call.message.message_id
    jobs = user_jobs.get(chat, [])
    if not jobs:
        back = types.InlineKeyboardMarkup()
        back.add(types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data='alert_back_to_menu'))
        bot.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å.",
            chat_id=chat,
            message_id=msg_id,
            reply_markup=back
        )
        return
    lines = []
    for job_id in jobs:
        parts = job_id.split('_', 5)
        if len(parts) == 6:
            _, _, symbol, direction, threshold, _ = parts
            lines.append(f"- {symbol} {direction} {threshold}$")
        else:
            lines.append(f"- {job_id}")
    text = "–í–∞—à—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:\n" + "\n".join(lines)
    back = types.InlineKeyboardMarkup()
    back.add(types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data='alert_back_to_menu'))
    bot.edit_message_text(
        text,
        chat_id=chat,
        message_id=msg_id,
        reply_markup=back
    )


def start_remove_alert(call):
    """–ö—Ä–æ–∫ 1: –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–ø–æ–≤—ñ—â–µ–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏, —â–æ —ó—Ö –Ω–µ–º–∞—î."""
    chat = call.message.chat.id
    msg_id = call.message.message_id

    # –¥—ñ—Å—Ç–∞—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–ø–æ–≤—ñ—â–µ–Ω—å
    jobs = notifications_handler.user_jobs.get(chat, [])

    if not jobs:
        # –ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ‚Äî —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º —ñ –∫–Ω–æ–ø–∫–æ—é –ù–∞–∑–∞–¥
        back = types.InlineKeyboardMarkup()
        back.add(types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data='alert_back_to_menu'))

        bot.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å.",
            chat_id=chat,
            message_id=msg_id,
            reply_markup=back
        )
    else:
        # –Ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        markup = get_remove_alerts_markup(chat)
        bot.edit_message_text(
            "‚ùå –í–∏–±–µ—Ä—ñ—Ç—å, —è–∫–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–¥–∞–ª–∏—Ç–∏:",
            chat_id=chat,
            message_id=msg_id,
            reply_markup=markup
        )


def confirm_remove_alert(call):
    """–ö—Ä–æ–∫ 2: –≤–∏–¥–∞–ª–µ–Ω–Ω—è alert —ñ –æ—á–∏—â–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫"""
    chat = call.message.chat.id
    msg_id = call.message.message_id
    job_id = call.data.split('alert_rm_')[1]
    notifications_handler.cancel_alert(chat_id=chat, job_id=job_id)
    bot.edit_message_reply_markup(
        chat_id=chat,
        message_id=msg_id,
        reply_markup=None
    )

def back_to_menu(call):
    chat = call.message.chat.id
    msg_id = call.message.message_id
    user_state[chat]['step'] = 'menu'
    bot.edit_message_text(
        "üîî Alerts menu:",
        chat_id=chat,
        message_id=msg_id,
        reply_markup=alert_menu_markup
    )

def back_to_coin(call):
    chat = call.message.chat.id
    msg_id = call.message.message_id
    user_state[chat]['step'] = 'coin'
    bot.edit_message_text(
        "1Ô∏è‚É£ Choose coin for alert:",
        chat_id=chat,
        message_id=msg_id,
        reply_markup=alert_coins_markup
    )

def back_to_threshold(call):
    chat = call.message.chat.id
    msg_id = call.message.message_id
    user_state[chat]['step'] = 'threshold'
    bot.edit_message_text(
        "3Ô∏è‚É£ Enter threshold price in USD (e.g. 70000):",
        chat_id=chat,
        message_id=msg_id,
        reply_markup=alert_threshold_markup
    )

def back_to_direction(call):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É direction (After coin selected)"""
    chat = call.message.chat.id
    msg_id = call.message.message_id
    # user_state[chat]['step'] = 'direction'
    state = user_state.get(chat)
    coin = state.get('coin', 'your coin')
    # –ó–∞–Ω–æ–≤–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä direction
    bot.edit_message_text(
        f"2Ô∏è‚É£ {coin}: Above or Below?",
        chat_id=chat,
        message_id=msg_id,
        reply_markup=alert_direction_markup
    )
    # state['step'] = 'direction'

