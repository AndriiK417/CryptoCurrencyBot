import notifications_handler
from notifications_handler import bot
from markups.alert_menu_markup      import alert_menu_markup
from markups.alert_coins_markup     import alert_coins_markup
from markups.alert_direction_markup import alert_direction_markup
from markups.alert_interval_markup  import alert_interval_markup

# –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: chat_id ‚Üí { step, coin, direction, threshold, interval }
user_state = {}

def show_alert_menu(message):
    """
    –ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é Alerts: Add / List
    """
    bot.send_message(
        message.chat.id,
        "üîî Alerts menu:",
        reply_markup=alert_menu_markup
    )

def start_add_alert(call):
    """–ö—Ä–æ–∫ 1: –≤–∏–±—ñ—Ä –º–æ–Ω–µ—Ç–∏"""
    chat = call.message.chat.id
    user_state[chat] = {'step': 'coin'}
    bot.send_message(
        chat,
        "1Ô∏è‚É£ Choose coin for alert:",
        reply_markup=alert_coins_markup
    )

def choose_coin(call):
    """–ö—Ä–æ–∫ 2: –≤–∏–±—ñ—Ä –Ω–∞–ø—Ä—è–º–∫—É (above/below)"""
    chat = call.message.chat.id
    sym = call.data.split('_', 2)[2]  # –∑ 'alert_coin_BTCUSD' –æ—Ç—Ä–∏–º–∞—î–º–æ 'BTCUSD'
    user_state[chat]['coin'] = sym
    user_state[chat]['step'] = 'direction'
    bot.send_message(
        chat,
        f"2Ô∏è‚É£ {sym}: Above or Below?",
        reply_markup=alert_direction_markup
    )

def choose_direction(call):
    """–ö—Ä–æ–∫ 3: –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Ä–æ–≥—É"""
    chat = call.message.chat.id
    direction = call.data.split('_')[2]  # 'above' –∞–±–æ 'below'
    user_state[chat]['direction'] = direction
    user_state[chat]['step'] = 'threshold'
    bot.send_message(
        chat,
        "3Ô∏è‚É£ Enter threshold price in USD (e.g. 70000):"
    )

def receive_threshold(message):
    """–ö—Ä–æ–∫ 4: –≤–∏–±—ñ—Ä —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –ø—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Ä–æ–≥—É"""
    chat = message.chat.id
    state = user_state.get(chat)
    if not state or state.get('step') != 'threshold':
        return False  # –Ω–µ –Ω–∞—à –≤–∏–ø–∞–¥–æ–∫, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
    try:
        th = float(message.text)
    except ValueError:
        bot.send_message(chat, "‚ùó Please enter a valid number.")
        return True  # –æ–±—Ä–æ–±–∏–ª–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    state['threshold'] = th
    state['step'] = 'interval'
    bot.send_message(
        chat,
        "4Ô∏è‚É£ Choose check interval:",
        reply_markup=alert_interval_markup
    )
    return True  # –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ

def choose_interval(call):
    """–ö—Ä–æ–∫ 5: —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è job-–∞"""
    chat = call.message.chat.id
    state = user_state.get(chat, {})
    interval = call.data.split('_')[2]  # 'hourly' –∞–±–æ 'daily'
    state['interval'] = interval

    job_id = notifications_handler.schedule_alert(
        chat_id   = chat,
        symbol    = state['coin'],
        direction = state['direction'],
        threshold = state['threshold'],
        interval  = state['interval']
    )
    bot.send_message(
        chat,
        f"‚úÖ Alert set:\n"
        f"{state['coin']} {state['direction']} {state['threshold']}$\n"
        f"every {state['interval']}\n"
        f"(job_id: {job_id})"
    )
    user_state.pop(chat, None)

def list_alerts(call):
    """–í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ alert-—ñ–≤"""
    notifications_handler.list_alerts(call.message)

def remove_alert(call):
    """–í–∏–¥–∞–ª–∏—Ç–∏ alert –∑–∞ job_id"""
    notifications_handler.remove_alert(call.message)
