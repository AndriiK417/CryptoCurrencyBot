from telebot import types
import notifications_handler
from notifications_handler import bot, scheduler, user_jobs
from markups.alerts_markup import (
    alert_menu_markup,
    alert_coins_markup,
    alert_type_markup,
    alert_direction_price_markup,
    alert_direction_percent_markup,
    alert_threshold_markup,
    alert_interval_markup,
    get_remove_alerts_markup
)

# –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: chat_id ‚Üí { step, coin, direction, threshold, interval, message_id }
user_state = {}


def show_alert_menu(message):
    """
    –ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é Alerts: Add / List / Remove
    """
    sent = bot.send_message(
        message.chat.id,
        "üîî Alerts menu:",
        reply_markup=alert_menu_markup
    )
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ message_id, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏
    user_state[message.chat.id] = {'message_id': sent.message_id}


def start_add_alert(call):
    """–ö—Ä–æ–∫ 1: –≤–∏–±—ñ—Ä –º–æ–Ω–µ—Ç–∏ ‚Äî —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    chat = call.message.chat.id
    msg_id = call.message.message_id
    user_state[chat].update({'step': 'coin', 'message_id': msg_id})
    bot.edit_message_text(
        "1Ô∏è‚É£ Choose coin for alert:",
        chat_id=chat,
        message_id=msg_id,
        reply_markup=alert_coins_markup
    )


def choose_coin(call: types.CallbackQuery):
    """2Ô∏è‚É£ –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –º–æ–Ω–µ—Ç–∏ ‚Äî –≤–∏–±—ñ—Ä –º–µ—Ç—Ä–∏–∫–∏: price –∞–±–æ percent"""
    chat   = call.message.chat.id
    msg_id = call.message.message_id
    symbol = call.data.split('_',2)[2]  # alert_coin_BTCUSD ‚Üí BTCUSD

    st = user_state[chat]
    st.update({'coin': symbol, 'step': 'type'})

    bot.edit_message_text(
        f"2Ô∏è‚É£ {symbol}: Choose alert type",
        chat_id=chat,
        message_id=msg_id,
        reply_markup=alert_type_markup
    )


def choose_type(call: types.CallbackQuery):
    """3Ô∏è‚É£ –í–∏–±—ñ—Ä –º–µ—Ç—Ä–∏–∫–∏ ‚Üí price —á–∏ percent, –ø–æ—Ç—ñ–º direction"""
    chat   = call.message.chat.id
    msg_id = call.message.message_id
    mode   = call.data.split('_',2)[2]  # 'price' –∞–±–æ 'percent'

    st = user_state[chat]
    st.update({'mode': mode, 'step': 'direction'})

    # –≤–∏–±–∏—Ä–∞—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π markup
    if mode == 'price':
        direction_markup = alert_direction_price_markup
        title = "Price alert: Above or Below $?"
    else:
        direction_markup = alert_direction_percent_markup
        title = "Percent alert: ‚ñ≤ or ‚ñº %?"

    # –ó–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç —ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∞ direction-menu
    bot.edit_message_text(
        f"3Ô∏è‚É£ {title}",
        chat_id=chat,
        message_id=msg_id,
        reply_markup=direction_markup
    )


def choose_direction(call):
    chat   = call.message.chat.id
    msg_id = call.message.message_id
    direction = call.data.split('_',2)[2]  # 'above' —á–∏ 'below'

    state = user_state[chat]
    state.update({'direction': direction, 'step': 'threshold'})

    # –í–∏–≤–æ–¥–∏–º–æ prompt –¥–ª—è threshold
    prompt = ("4Ô∏è‚É£ Enter threshold price in USD (e.g. 70000):"
              if state['mode']=='price'
              else "4Ô∏è‚É£ Enter threshold percent (e.g. 5 for 5%):")

    # –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –æ–¥–Ω—ñ—î—é –∫–Ω–æ–ø–∫–æ—é ¬´–ù–∞–∑–∞–¥¬ª
    back = types.InlineKeyboardMarkup()
    back.add(types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data='alert_back_to_direction'))

    bot.edit_message_text(
        prompt,
        chat_id=chat,
        message_id=msg_id,
        reply_markup=back
    )


def receive_threshold(message):
    """–ö—Ä–æ–∫ 4: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ä–æ–≥—É —Ç–∞ –≤–∏–±—ñ—Ä —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É"""
    chat = message.chat.id
    state = user_state.get(chat, {})
    if state.get('step') != 'threshold':
        return False
    try:
        th = float(message.text)
    except ValueError:
        bot.send_message(chat, "‚ùó Please enter a valid number.")
        return True
    # –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–æ—Ä–æ–≥–æ–º
    bot.delete_message(chat_id=chat, message_id=message.message_id)
    state.update({'threshold': th, 'step': 'interval'})
    msg_id = state.get('message_id')
    bot.edit_message_text(
        "4Ô∏è‚É£ Choose check interval:",
        chat_id=chat,
        message_id=msg_id,
        reply_markup=alert_interval_markup
    )
    return True


def choose_interval(call):
    """–ö—Ä–æ–∫ 5: —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è alert —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"""
    chat = call.message.chat.id
    msg_id = call.message.message_id
    state = user_state.get(chat, {})
    interval = call.data.split('_', 2)[2]
    state['interval'] = interval

    notifications_handler.schedule_alert(
        chat_id=chat,
        symbol=state['coin'],
        direction=state['direction'],
        threshold=state['threshold'],
        interval=state['interval'],
        mode=state['mode']
    )
    suffix = '%' if state.get('mode') == 'percent' else '$'
    bot.edit_message_text(
        "‚úÖ Alert set:\n"
        f"{state['coin']} {state['direction']} {state['threshold']}{suffix}\n"
        f"{state['interval']}",
        chat_id=chat,
        message_id=msg_id,
        reply_markup=None
    )
    user_state.pop(chat, None)


def list_alerts(call):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É alert-—ñ–≤ —É —Ç–æ–º—É –∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ"""
    chat = call.message.chat.id
    msg_id = call.message.message_id
    jobs = user_jobs.get(chat, [])
    if not jobs:
        back = types.InlineKeyboardMarkup()
        back.add(types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data='alert_back_to_menu'))
        bot.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å.",
            chat_id=chat,
            message_id=msg_id,
            reply_markup=back
        )
        return
    lines = []
    for job_id in jobs:
        parts = job_id.split('_')
        # —Ç–µ–ø–µ—Ä parts = ['alert', chat, symbol, mode, direction, threshold, interval]
        if len(parts) >= 7:
            _, _, symbol, mode, direction, threshold, _ = parts[:7]
            suffix = '%' if mode == 'percent' else '$'
            lines.append(f"- {symbol} {direction} {threshold}{suffix}")
        else:
            lines.append(f"- {job_id}")
    text = "–í–∞—à—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:\n" + "\n".join(lines)
    back = types.InlineKeyboardMarkup()
    back.add(types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data='alert_back_to_menu'))
    bot.edit_message_text(
        text,
        chat_id=chat,
        message_id=msg_id,
        reply_markup=back
    )


def start_remove_alert(call):
    """–ö—Ä–æ–∫ 1: –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–ø–æ–≤—ñ—â–µ–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏, —â–æ —ó—Ö –Ω–µ–º–∞—î."""
    chat = call.message.chat.id
    msg_id = call.message.message_id

    # –¥—ñ—Å—Ç–∞—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–ø–æ–≤—ñ—â–µ–Ω—å
    jobs = notifications_handler.user_jobs.get(chat, [])

    if not jobs:
        # –ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ‚Äî —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º —ñ –∫–Ω–æ–ø–∫–æ—é –ù–∞–∑–∞–¥
        back = types.InlineKeyboardMarkup()
        back.add(types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data='alert_back_to_menu'))

        bot.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å.",
            chat_id=chat,
            message_id=msg_id,
            reply_markup=back
        )
    else:
        # –Ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        markup = get_remove_alerts_markup(chat)
        bot.edit_message_text(
            "‚ùå –í–∏–±–µ—Ä—ñ—Ç—å, —è–∫–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–¥–∞–ª–∏—Ç–∏:",
            chat_id=chat,
            message_id=msg_id,
            reply_markup=markup
        )


def confirm_remove_alert(call: types.CallbackQuery):
    """
    –û—Ç—Ä–∏–º—É—î job_id —ñ–∑ callback_data = 'alert_rm_<job_id>',
    –æ–¥—Ä–∞–∑—É –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ –∑—ñ scheduler —ñ –∑ user_jobs,
    —Ñ–æ—Ä–º—É—î –¥—Ä—É–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —Ä–µ–¥–∞–≥—É—î/–≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –π–æ–≥–æ.
    """
    chat = call.message.chat.id
    msg_id = call.message.message_id

    # –¥—ñ—Å—Ç–∞—î–º–æ —á–∏—Å—Ç–∏–π job_id
    job_id = call.data[len('alert_rm_'):]

    # —Å–ø–∞—Ä—Å–∏–º–æ –¥—Ä—É–∂–Ω—ñ–π –ª–µ–π–±–ª –∑—ñ job_id (suffix % –∞–±–æ $)
    parts = job_id.split('_')
    label = job_id
    if len(parts) >= 7:
        _, _, symbol, mode, direction, threshold, _ = parts[:7]
        suffix = '%' if mode == 'percent' else '$'
        label = f"{symbol} {direction} {threshold}{suffix}"

    try:
        # 1) –≤–∏–¥–∞–ª–∏—Ç–∏ job —ñ–∑ scheduler-–∞
        scheduler.remove_job(job_id)
        # 2) –≤–∏–¥–∞–ª–∏—Ç–∏ job_id –∑ user_jobs
        if job_id in user_jobs.get(chat, []):
            user_jobs[chat].remove(job_id)

        # 3) –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —é–∑–µ—Ä—É ‚Äì —Ä–µ–¥–∞–≥—É—î–º–æ —Ç–µ —Å–∞–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        bot.edit_message_text(
            f"üóëÔ∏è Alert removed: {label}",
            chat_id=chat,
            message_id=msg_id,
            reply_markup=None
        )

    except Exception as e:
        # —è–∫—â–æ —â–æ—Å—å –Ω–µ —Ç–∞–∫ ‚Äî –ø–æ–≤—ñ–¥–æ–º–∏–º–æ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –π –∑–∞–ª–∏—à–∏–º–æ –∫–Ω–æ–ø–∫–∏
        bot.edit_message_text(
            f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:\n{e}",
            chat_id=chat,
            message_id=msg_id,
            reply_markup=get_remove_alerts_markup(chat)
        )

def back_to_menu(call):
    chat = call.message.chat.id
    msg_id = call.message.message_id
    user_state[chat]['step'] = 'menu'
    bot.edit_message_text(
        "üîî Alerts menu:",
        chat_id=chat,
        message_id=msg_id,
        reply_markup=alert_menu_markup
    )

def back_to_coin(call):
    chat = call.message.chat.id
    msg_id = call.message.message_id
    user_state[chat]['step'] = 'coin'
    bot.edit_message_text(
        "1Ô∏è‚É£ Choose coin for alert:",
        chat_id=chat,
        message_id=msg_id,
        reply_markup=alert_coins_markup
    )

def back_to_type(call):
    """
    –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –∫—Ä–æ–∫ –≤–∏–±–æ—Ä—É –º–µ—Ç—Ä–∏–∫–∏ (price –∞–±–æ percent)
    """
    chat   = call.message.chat.id
    msg_id = call.message.message_id
    state  = user_state.get(chat, {})

    # –Ø–∫—â–æ –º–æ–Ω–µ—Ç—É –≤–∂–µ –≤–∏–±—Ä–∞–ª–∏ ‚Äî –¥—ñ—Å—Ç–∞—î–º–æ —ó—ó –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    coin = state.get('coin', 'your coin')

    # –†–µ–¥–∞–≥—É—î–º–æ —Ç–µ —Å–∞–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.edit_message_text(
        f"2Ô∏è‚É£ {coin}: Choose alert type",
        chat_id=chat,
        message_id=msg_id,
        reply_markup=alert_type_markup
    )

    # –û–Ω–æ–≤–ª—é—î–º–æ FSM-—Å—Ç–∞–Ω
    state['step'] = 'type'

def back_to_threshold(call):
    chat = call.message.chat.id
    msg_id = call.message.message_id
    state  = user_state.get(chat, {})

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫–∏–π —Å–∞–º–µ prompt –ø–æ–∫–∞–∑–∞—Ç–∏
    mode = state.get('mode', 'absolute')
    if mode == 'absolute':
        prompt = "3Ô∏è‚É£ Enter threshold price in USD (e.g. 70000):"
    else:  # percent
        prompt = "3Ô∏è‚É£ Enter threshold percent (e.g. 5 for 5%):"
    
    bot.edit_message_text(
        prompt,
        chat_id=chat,
        message_id=msg_id,
        reply_markup=alert_threshold_markup
    )

def back_to_direction(call):
    """
    –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –∫—Ä–æ–∫ –≤–∏–±–æ—Ä—É –Ω–∞–ø—Ä—è–º–∫—É:
    ‚Äì —è–∫—â–æ mode=='price' ‚Üí –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ ‚Äúüîº Above $‚Äù/‚ÄúüîΩ Below $‚Äù
    ‚Äì —è–∫—â–æ mode=='percent' ‚Üí –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ ‚Äúüìà ‚ñ≤ %‚Äù/‚Äúüìâ ‚ñº %‚Äù
    """
    chat   = call.message.chat.id
    msg_id = call.message.message_id
    state  = user_state.get(chat, {})

    # –î—ñ—Å—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º ('price' –∞–±–æ 'percent')
    mode = state.get('mode', 'price')
    coin = state.get('coin', 'your coin')

    if mode == 'price':
        direction_markup    = alert_direction_price_markup
        title     = f"3Ô∏è‚É£ {coin}: Price alert ‚Äì Above or Below $?"
    else:
        direction_markup    = alert_direction_percent_markup
        title     = f"3Ô∏è‚É£ {coin}: Percent alert ‚Äì ‚ñ≤ or ‚ñº %?"

    # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    bot.edit_message_text(
        title,
        chat_id=chat,
        message_id=msg_id,
        reply_markup=direction_markup
    )
    # state['step'] = 'direction'

